# This is a course type
# The ! means that we can't accept a course without these fields
type Course {
  _id: ID!
  title: String!
  teacher: String
  description: String!
  topic: String
  people: [Student]
}

type Student {
  _id: ID!
  name: String!
  email: String!
}

# When we executed 'getCourses', this is going to gave us an array of course type
# The ! means that the param is an obligatory one
type Query {
  "Returns an array with all the courses"
  getCourses: [Course]
  "Returns an specific course defining by the ID"
  getCourse(id: ID!): Course
  "Returns an array with all the students"
  getStudents: [Student]
  "Returns an specific student defining by the ID"
  getStudent(id: ID!): Student
}

# We define the type of CourseInput for tye Mutation
input CourseInput {
  title: String!
  teacher: String
  description: String!
  topic: String
}

input CourseEditInput {
  title: String
  teacher: String
  description: String
  topic: String
}

# We don't create the ID field because mongo created it for us
input StudentInput {
  name: String!
  email: String!
}

input StudentEditInput {
  name: String
  email: String
}

# We define a mutation to insert data
type Mutation {
  "Create a course"
  # The last nam eis the return type
  createCourse(input: CourseInput!): Course
  "Edit a course"
  editCourse(_id: ID!, input: CourseEditInput): Course
  "Create a student"
  createStudent(input: StudentInput!): Student
  "Edit a student"
  editStudent(_id: ID!, input: StudentEditInput): Student
  "Add people to a course"
  addPeople(courseID: ID!, personID: ID!): Course
}
